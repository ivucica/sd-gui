/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionItem
 */
export interface ExtensionItem {
    /**
     * Extension name
     * @type {string}
     * @memberof ExtensionItem
     */
    name: string;
    /**
     * Extension Repository URL
     * @type {string}
     * @memberof ExtensionItem
     */
    remote: string;
    /**
     * Extension Repository Branch
     * @type {string}
     * @memberof ExtensionItem
     */
    branch: string;
    /**
     * Extension Repository Commit Hash
     * @type {string}
     * @memberof ExtensionItem
     */
    commitHash: string;
    /**
     * Extension Version
     * @type {string}
     * @memberof ExtensionItem
     */
    version: string;
    /**
     * Extension Repository Commit Date
     * @type {string}
     * @memberof ExtensionItem
     */
    commitDate: string;
    /**
     * Flag specifying whether this extension is enabled
     * @type {boolean}
     * @memberof ExtensionItem
     */
    enabled: boolean;
}

/**
 * Check if a given object implements the ExtensionItem interface.
 */
export function instanceOfExtensionItem(value: object): value is ExtensionItem {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('remote' in value) || value['remote'] === undefined) return false;
    if (!('branch' in value) || value['branch'] === undefined) return false;
    if (!('commitHash' in value) || value['commitHash'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('commitDate' in value) || value['commitDate'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    return true;
}

export function ExtensionItemFromJSON(json: any): ExtensionItem {
    return ExtensionItemFromJSONTyped(json, false);
}

export function ExtensionItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionItem {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'remote': json['remote'],
        'branch': json['branch'],
        'commitHash': json['commit_hash'],
        'version': json['version'],
        'commitDate': json['commit_date'],
        'enabled': json['enabled'],
    };
}

  export function ExtensionItemToJSON(json: any): ExtensionItem {
      return ExtensionItemToJSONTyped(json, false);
  }

  export function ExtensionItemToJSONTyped(value?: ExtensionItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'remote': value['remote'],
        'branch': value['branch'],
        'commit_hash': value['commitHash'],
        'version': value['version'],
        'commit_date': value['commitDate'],
        'enabled': value['enabled'],
    };
}

