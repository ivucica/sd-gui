/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodyDeoldifyImageDeoldifyImagePost,
  BodyDetectControlnetDetectPost,
  BodyFetchControlnetFastloadFetchPost,
  BodyRoopImageRoopImagePost,
  BodyViewControlnetFastloadViewPost,
  CreateResponse,
  EmbeddingsResponse,
  Estimation,
  ExtensionItem,
  ExtrasBatchImagesRequest,
  ExtrasBatchImagesResponse,
  ExtrasSingleImageRequest,
  ExtrasSingleImageResponse,
  FaceRestorerItem,
  Flags,
  HTTPValidationError,
  HypernetworkItem,
  ImageToImageResponse,
  InterrogateRequest,
  LatentUpscalerModeItem,
  MemoryResponse,
  ModulesApiModelsProgressResponse,
  ModulesProgressProgressResponse,
  Options,
  PNGInfoRequest,
  PNGInfoResponse,
  PredictBody,
  PreprocessResponse,
  ProgressRequest,
  PromptStyleItem,
  QuicksettingsHint,
  RealesrganItem,
  ResetBody,
  SDModelItem,
  SDVaeItem,
  SamplerItem,
  ScriptInfo,
  ScriptsList,
  StableDiffusionProcessingImg2Img,
  StableDiffusionProcessingTxt2Img,
  TextToImageResponse,
  TrainResponse,
  UpscalerItem,
} from '../models/index';
import {
    BodyDeoldifyImageDeoldifyImagePostFromJSON,
    BodyDeoldifyImageDeoldifyImagePostToJSON,
    BodyDetectControlnetDetectPostFromJSON,
    BodyDetectControlnetDetectPostToJSON,
    BodyFetchControlnetFastloadFetchPostFromJSON,
    BodyFetchControlnetFastloadFetchPostToJSON,
    BodyRoopImageRoopImagePostFromJSON,
    BodyRoopImageRoopImagePostToJSON,
    BodyViewControlnetFastloadViewPostFromJSON,
    BodyViewControlnetFastloadViewPostToJSON,
    CreateResponseFromJSON,
    CreateResponseToJSON,
    EmbeddingsResponseFromJSON,
    EmbeddingsResponseToJSON,
    EstimationFromJSON,
    EstimationToJSON,
    ExtensionItemFromJSON,
    ExtensionItemToJSON,
    ExtrasBatchImagesRequestFromJSON,
    ExtrasBatchImagesRequestToJSON,
    ExtrasBatchImagesResponseFromJSON,
    ExtrasBatchImagesResponseToJSON,
    ExtrasSingleImageRequestFromJSON,
    ExtrasSingleImageRequestToJSON,
    ExtrasSingleImageResponseFromJSON,
    ExtrasSingleImageResponseToJSON,
    FaceRestorerItemFromJSON,
    FaceRestorerItemToJSON,
    FlagsFromJSON,
    FlagsToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HypernetworkItemFromJSON,
    HypernetworkItemToJSON,
    ImageToImageResponseFromJSON,
    ImageToImageResponseToJSON,
    InterrogateRequestFromJSON,
    InterrogateRequestToJSON,
    LatentUpscalerModeItemFromJSON,
    LatentUpscalerModeItemToJSON,
    MemoryResponseFromJSON,
    MemoryResponseToJSON,
    ModulesApiModelsProgressResponseFromJSON,
    ModulesApiModelsProgressResponseToJSON,
    ModulesProgressProgressResponseFromJSON,
    ModulesProgressProgressResponseToJSON,
    OptionsFromJSON,
    OptionsToJSON,
    PNGInfoRequestFromJSON,
    PNGInfoRequestToJSON,
    PNGInfoResponseFromJSON,
    PNGInfoResponseToJSON,
    PredictBodyFromJSON,
    PredictBodyToJSON,
    PreprocessResponseFromJSON,
    PreprocessResponseToJSON,
    ProgressRequestFromJSON,
    ProgressRequestToJSON,
    PromptStyleItemFromJSON,
    PromptStyleItemToJSON,
    QuicksettingsHintFromJSON,
    QuicksettingsHintToJSON,
    RealesrganItemFromJSON,
    RealesrganItemToJSON,
    ResetBodyFromJSON,
    ResetBodyToJSON,
    SDModelItemFromJSON,
    SDModelItemToJSON,
    SDVaeItemFromJSON,
    SDVaeItemToJSON,
    SamplerItemFromJSON,
    SamplerItemToJSON,
    ScriptInfoFromJSON,
    ScriptInfoToJSON,
    ScriptsListFromJSON,
    ScriptsListToJSON,
    StableDiffusionProcessingImg2ImgFromJSON,
    StableDiffusionProcessingImg2ImgToJSON,
    StableDiffusionProcessingTxt2ImgFromJSON,
    StableDiffusionProcessingTxt2ImgToJSON,
    TextToImageResponseFromJSON,
    TextToImageResponseToJSON,
    TrainResponseFromJSON,
    TrainResponseToJSON,
    UpscalerItemFromJSON,
    UpscalerItemToJSON,
} from '../models/index';

export interface ApiInfoInfoGetRequest {
    serialize?: boolean;
}

export interface ApiInfoInfoGet0Request {
    serialize?: boolean;
}

export interface BuildResourceAssetsPathGetRequest {
    path: string;
}

export interface CreateEmbeddingSdapiV1CreateEmbeddingPostRequest {
    body: object;
}

export interface CreateHypernetworkSdapiV1CreateHypernetworkPostRequest {
    body: object;
}

export interface DeoldifyImageDeoldifyImagePostRequest {
    bodyDeoldifyImageDeoldifyImagePost?: BodyDeoldifyImageDeoldifyImagePost;
}

export interface DetectControlnetDetectPostRequest {
    bodyDetectControlnetDetectPost?: BodyDetectControlnetDetectPost;
}

export interface DownloadSysinfoInternalSysinfoGetRequest {
    attachment?: any;
}

export interface ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest {
    extrasBatchImagesRequest: ExtrasBatchImagesRequest;
}

export interface ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest {
    extrasSingleImageRequest: ExtrasSingleImageRequest;
}

export interface FetchControlnetFastloadFetchPostRequest {
    bodyFetchControlnetFastloadFetchPost: BodyFetchControlnetFastloadFetchPost;
}

export interface FetchFileSdExtraNetworksThumbGetRequest {
    filename?: string;
}

export interface FileDeprecatedFilePathGetRequest {
    path: string;
}

export interface FileFilePathOrUrlGetRequest {
    pathOrUrl: string;
}

export interface FileFilePathOrUrlHeadRequest {
    pathOrUrl: string;
}

export interface GetLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGetRequest {
    folder: any;
    loraName: any;
}

export interface GetLoraInfoTacapiV1LoraInfoLoraNameGetRequest {
    loraName: any;
}

export interface GetLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGetRequest {
    folder: any;
    lycoName: any;
}

export interface GetLycoInfoTacapiV1LycoInfoLycoNameGetRequest {
    lycoName: any;
}

export interface GetMetadataSdExtraNetworksMetadataGetRequest {
    page?: string;
    item?: string;
}

export interface GetSingleCardSdExtraNetworksGetSingleCardGetRequest {
    page?: string;
    tabname?: string;
    name?: string;
}

export interface Img2imgapiSdapiV1Img2imgPostRequest {
    stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img;
}

export interface InterrogateapiSdapiV1InterrogatePostRequest {
    interrogateRequest: InterrogateRequest;
}

export interface LoginLoginPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface LoginLoginPost0Request {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface ModelListControlnetModelListGetRequest {
    update?: boolean;
}

export interface ModuleListControlnetModuleListGetRequest {
    aliasNames?: boolean;
}

export interface PnginfoapiSdapiV1PngInfoPostRequest {
    pNGInfoRequest: PNGInfoRequest;
}

export interface PredictApiApiNamePostRequest {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictApiApiNamePost0Request {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictRunApiNamePostRequest {
    apiName: string;
    predictBody: PredictBody;
}

export interface PredictRunApiNamePost0Request {
    apiName: string;
    predictBody: PredictBody;
}

export interface PreprocessSdapiV1PreprocessPostRequest {
    body: object;
}

export interface ProgressapiInternalProgressPostRequest {
    progressRequest: ProgressRequest;
}

export interface ProgressapiSdapiV1ProgressGetRequest {
    skipCurrentImage?: boolean;
}

export interface ResetIteratorResetPostRequest {
    resetBody: ResetBody;
}

export interface ResetIteratorResetPost0Request {
    resetBody: ResetBody;
}

export interface ReverseProxyProxyUrlPathGetRequest {
    urlPath: string;
}

export interface ReverseProxyProxyUrlPathHeadRequest {
    urlPath: string;
}

export interface RoopImageRoopImagePostRequest {
    bodyRoopImageRoopImagePost?: BodyRoopImageRoopImagePost;
}

export interface SetConfigSdapiV1OptionsPostRequest {
    body: object;
}

export interface StaticResourceStaticPathGetRequest {
    path: string;
}

export interface StreamStreamSessionHashRunComponentIdGetRequest {
    sessionHash: string;
    run: number;
    componentId: number;
}

export interface Text2imgapiSdapiV1Txt2imgPostRequest {
    stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img;
}

export interface TrainEmbeddingSdapiV1TrainEmbeddingPostRequest {
    body: object;
}

export interface TrainHypernetworkSdapiV1TrainHypernetworkPostRequest {
    body: object;
}

export interface UploadFileUploadPostRequest {
    files: Array<Blob>;
}

export interface ViewControlnetFastloadViewPostRequest {
    bodyViewControlnetFastloadViewPost?: BodyViewControlnetFastloadViewPost;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Api Info
     */
    async apiInfoInfoGetRaw(requestParameters: ApiInfoInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['serialize'] != null) {
            queryParameters['serialize'] = requestParameters['serialize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Info
     */
    async apiInfoInfoGet(requestParameters: ApiInfoInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiInfoInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Info
     */
    async apiInfoInfoGet_1Raw(requestParameters: ApiInfoInfoGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['serialize'] != null) {
            queryParameters['serialize'] = requestParameters['serialize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/info/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Info
     */
    async apiInfoInfoGet_1(requestParameters: ApiInfoInfoGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiInfoInfoGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * App Id
     */
    async appIdAppIdGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app_id/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * App Id
     */
    async appIdAppIdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appIdAppIdGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * App Id
     */
    async appIdAppIdGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app_id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * App Id
     */
    async appIdAppIdGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appIdAppIdGet_2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Build Resource
     */
    async buildResourceAssetsPathGetRaw(requestParameters: BuildResourceAssetsPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling buildResourceAssetsPathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assets/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Build Resource
     */
    async buildResourceAssetsPathGet(requestParameters: BuildResourceAssetsPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.buildResourceAssetsPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Control Types
     */
    async controlTypesControlnetControlTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/control_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Control Types
     */
    async controlTypesControlnetControlTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.controlTypesControlnetControlTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createEmbeddingSdapiV1CreateEmbeddingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPost(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createHypernetworkSdapiV1CreateHypernetworkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPost(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateResponse> {
        const response = await this.createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deoldify Image
     */
    async deoldifyImageDeoldifyImagePostRaw(requestParameters: DeoldifyImageDeoldifyImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deoldify/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyDeoldifyImageDeoldifyImagePostToJSON(requestParameters['bodyDeoldifyImageDeoldifyImagePost']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deoldify Image
     */
    async deoldifyImageDeoldifyImagePost(requestParameters: DeoldifyImageDeoldifyImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deoldifyImageDeoldifyImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detect
     */
    async detectControlnetDetectPostRaw(requestParameters: DetectControlnetDetectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnet/detect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyDetectControlnetDetectPostToJSON(requestParameters['bodyDetectControlnetDetectPost']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Detect
     */
    async detectControlnetDetectPost(requestParameters: DetectControlnetDetectPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.detectControlnetDetectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Sysinfo
     */
    async downloadSysinfoInternalSysinfoGetRaw(requestParameters: DownloadSysinfoInternalSysinfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['attachment'] != null) {
            queryParameters['attachment'] = requestParameters['attachment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal/sysinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Sysinfo
     */
    async downloadSysinfoInternalSysinfoGet(requestParameters: DownloadSysinfoInternalSysinfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadSysinfoInternalSysinfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtrasBatchImagesResponse>> {
        if (requestParameters['extrasBatchImagesRequest'] == null) {
            throw new runtime.RequiredError(
                'extrasBatchImagesRequest',
                'Required parameter "extrasBatchImagesRequest" was null or undefined when calling extrasBatchImagesApiSdapiV1ExtraBatchImagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-batch-images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasBatchImagesRequestToJSON(requestParameters['extrasBatchImagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasBatchImagesResponseFromJSON(jsonValue));
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtrasBatchImagesResponse> {
        const response = await this.extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtrasSingleImageResponse>> {
        if (requestParameters['extrasSingleImageRequest'] == null) {
            throw new runtime.RequiredError(
                'extrasSingleImageRequest',
                'Required parameter "extrasSingleImageRequest" was null or undefined when calling extrasSingleImageApiSdapiV1ExtraSingleImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-single-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasSingleImageRequestToJSON(requestParameters['extrasSingleImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasSingleImageResponseFromJSON(jsonValue));
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePost(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtrasSingleImageResponse> {
        const response = await this.extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Favicon
     */
    async faviconFaviconIcoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/favicon.ico`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Favicon
     */
    async faviconFaviconIcoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.faviconFaviconIcoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch
     */
    async fetchControlnetFastloadFetchPostRaw(requestParameters: FetchControlnetFastloadFetchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['bodyFetchControlnetFastloadFetchPost'] == null) {
            throw new runtime.RequiredError(
                'bodyFetchControlnetFastloadFetchPost',
                'Required parameter "bodyFetchControlnetFastloadFetchPost" was null or undefined when calling fetchControlnetFastloadFetchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnetFastload/fetch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyFetchControlnetFastloadFetchPostToJSON(requestParameters['bodyFetchControlnetFastloadFetchPost']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Fetch
     */
    async fetchControlnetFastloadFetchPost(requestParameters: FetchControlnetFastloadFetchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fetchControlnetFastloadFetchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch File
     */
    async fetchFileSdExtraNetworksThumbGetRaw(requestParameters: FetchFileSdExtraNetworksThumbGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['filename'] != null) {
            queryParameters['filename'] = requestParameters['filename'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sd_extra_networks/thumb`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Fetch File
     */
    async fetchFileSdExtraNetworksThumbGet(requestParameters: FetchFileSdExtraNetworksThumbGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fetchFileSdExtraNetworksThumbGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * File Deprecated
     */
    async fileDeprecatedFilePathGetRaw(requestParameters: FileDeprecatedFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling fileDeprecatedFilePathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * File Deprecated
     */
    async fileDeprecatedFilePathGet(requestParameters: FileDeprecatedFilePathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileDeprecatedFilePathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * File
     */
    async fileFilePathOrUrlGetRaw(requestParameters: FileFilePathOrUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['pathOrUrl'] == null) {
            throw new runtime.RequiredError(
                'pathOrUrl',
                'Required parameter "pathOrUrl" was null or undefined when calling fileFilePathOrUrlGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file={path_or_url}`.replace(`{${"path_or_url"}}`, encodeURIComponent(String(requestParameters['pathOrUrl']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * File
     */
    async fileFilePathOrUrlGet(requestParameters: FileFilePathOrUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileFilePathOrUrlGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * File
     */
    async fileFilePathOrUrlHeadRaw(requestParameters: FileFilePathOrUrlHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['pathOrUrl'] == null) {
            throw new runtime.RequiredError(
                'pathOrUrl',
                'Required parameter "pathOrUrl" was null or undefined when calling fileFilePathOrUrlHead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/file={path_or_url}`.replace(`{${"path_or_url"}}`, encodeURIComponent(String(requestParameters['pathOrUrl']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * File
     */
    async fileFilePathOrUrlHead(requestParameters: FileFilePathOrUrlHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileFilePathOrUrlHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flags>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/cmd-flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagsFromJSON(jsonValue));
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flags> {
        const response = await this.getCmdFlagsSdapiV1CmdFlagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Config
     */
    async getConfigConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getConfigConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigConfigGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Config
     */
    async getConfigConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getConfigConfigGet_3Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Options>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionsFromJSON(jsonValue));
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Options> {
        const response = await this.getConfigSdapiV1OptionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentUserUserGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Current User
     */
    async getCurrentUserUserGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCurrentUserUserGet_4Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/embeddings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingsResponseFromJSON(jsonValue));
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingsResponse> {
        const response = await this.getEmbeddingsSdapiV1EmbeddingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Extensions List
     */
    async getExtensionsListSdapiV1ExtensionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtensionItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/extensions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtensionItemFromJSON));
    }

    /**
     * Get Extensions List
     */
    async getExtensionsListSdapiV1ExtensionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtensionItem>> {
        const response = await this.getExtensionsListSdapiV1ExtensionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FaceRestorerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/face-restorers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaceRestorerItemFromJSON));
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FaceRestorerItem>> {
        const response = await this.getFaceRestorersSdapiV1FaceRestorersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HypernetworkItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/hypernetworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HypernetworkItemFromJSON));
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HypernetworkItem>> {
        const response = await this.getHypernetworksSdapiV1HypernetworksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Latent Upscale Modes
     */
    async getLatentUpscaleModesSdapiV1LatentUpscaleModesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LatentUpscalerModeItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/latent-upscale-modes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LatentUpscalerModeItemFromJSON));
    }

    /**
     * Get Latent Upscale Modes
     */
    async getLatentUpscaleModesSdapiV1LatentUpscaleModesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LatentUpscalerModeItem>> {
        const response = await this.getLatentUpscaleModesSdapiV1LatentUpscaleModesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Lora Info Subfolder
     */
    async getLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGetRaw(requestParameters: GetLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling getLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGet().'
            );
        }

        if (requestParameters['loraName'] == null) {
            throw new runtime.RequiredError(
                'loraName',
                'Required parameter "loraName" was null or undefined when calling getLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tacapi/v1/lora-info/{folder}/{lora_name}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters['folder']))).replace(`{${"lora_name"}}`, encodeURIComponent(String(requestParameters['loraName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Lora Info Subfolder
     */
    async getLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGet(requestParameters: GetLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLoraInfoSubfolderTacapiV1LoraInfoFolderLoraNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Lora Info
     */
    async getLoraInfoTacapiV1LoraInfoLoraNameGetRaw(requestParameters: GetLoraInfoTacapiV1LoraInfoLoraNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['loraName'] == null) {
            throw new runtime.RequiredError(
                'loraName',
                'Required parameter "loraName" was null or undefined when calling getLoraInfoTacapiV1LoraInfoLoraNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tacapi/v1/lora-info/{lora_name}`.replace(`{${"lora_name"}}`, encodeURIComponent(String(requestParameters['loraName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Lora Info
     */
    async getLoraInfoTacapiV1LoraInfoLoraNameGet(requestParameters: GetLoraInfoTacapiV1LoraInfoLoraNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLoraInfoTacapiV1LoraInfoLoraNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Loras
     */
    async getLorasSdapiV1LorasGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/loras`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Loras
     */
    async getLorasSdapiV1LorasGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLorasSdapiV1LorasGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Lyco Info Subfolder
     */
    async getLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGetRaw(requestParameters: GetLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling getLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGet().'
            );
        }

        if (requestParameters['lycoName'] == null) {
            throw new runtime.RequiredError(
                'lycoName',
                'Required parameter "lycoName" was null or undefined when calling getLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tacapi/v1/lyco-info/{folder}/{lyco_name}`.replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters['folder']))).replace(`{${"lyco_name"}}`, encodeURIComponent(String(requestParameters['lycoName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Lyco Info Subfolder
     */
    async getLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGet(requestParameters: GetLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLycoInfoSubfolderTacapiV1LycoInfoFolderLycoNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Lyco Info
     */
    async getLycoInfoTacapiV1LycoInfoLycoNameGetRaw(requestParameters: GetLycoInfoTacapiV1LycoInfoLycoNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['lycoName'] == null) {
            throw new runtime.RequiredError(
                'lycoName',
                'Required parameter "lycoName" was null or undefined when calling getLycoInfoTacapiV1LycoInfoLycoNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tacapi/v1/lyco-info/{lyco_name}`.replace(`{${"lyco_name"}}`, encodeURIComponent(String(requestParameters['lycoName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Lyco Info
     */
    async getLycoInfoTacapiV1LycoInfoLycoNameGet(requestParameters: GetLycoInfoTacapiV1LycoInfoLycoNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLycoInfoTacapiV1LycoInfoLycoNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemoryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/memory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemoryResponseFromJSON(jsonValue));
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemoryResponse> {
        const response = await this.getMemorySdapiV1MemoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Metadata
     */
    async getMetadataSdExtraNetworksMetadataGetRaw(requestParameters: GetMetadataSdExtraNetworksMetadataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['item'] != null) {
            queryParameters['item'] = requestParameters['item'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sd_extra_networks/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Metadata
     */
    async getMetadataSdExtraNetworksMetadataGet(requestParameters: GetMetadataSdExtraNetworksMetadataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMetadataSdExtraNetworksMetadataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PromptStyleItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/prompt-styles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptStyleItemFromJSON));
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PromptStyleItem>> {
        const response = await this.getPromptStylesSdapiV1PromptStylesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Queue Status
     */
    async getQueueStatusQueueStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Estimation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/queue/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EstimationFromJSON(jsonValue));
    }

    /**
     * Get Queue Status
     */
    async getQueueStatusQueueStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Estimation> {
        const response = await this.getQueueStatusQueueStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RealesrganItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/realesrgan-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RealesrganItemFromJSON));
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RealesrganItem>> {
        const response = await this.getRealesrganModelsSdapiV1RealesrganModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SamplerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/samplers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SamplerItemFromJSON));
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SamplerItem>> {
        const response = await this.getSamplersSdapiV1SamplersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Script Info
     */
    async getScriptInfoSdapiV1ScriptInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScriptInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/script-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScriptInfoFromJSON));
    }

    /**
     * Get Script Info
     */
    async getScriptInfoSdapiV1ScriptInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScriptInfo>> {
        const response = await this.getScriptInfoSdapiV1ScriptInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptsList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/scripts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptsListFromJSON(jsonValue));
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptsList> {
        const response = await this.getScriptsListSdapiV1ScriptsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SDModelItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/sd-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SDModelItemFromJSON));
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SDModelItem>> {
        const response = await this.getSdModelsSdapiV1SdModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Sd Vaes
     */
    async getSdVaesSdapiV1SdVaeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SDVaeItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/sd-vae`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SDVaeItemFromJSON));
    }

    /**
     * Get Sd Vaes
     */
    async getSdVaesSdapiV1SdVaeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SDVaeItem>> {
        const response = await this.getSdVaesSdapiV1SdVaeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Single Card
     */
    async getSingleCardSdExtraNetworksGetSingleCardGetRaw(requestParameters: GetSingleCardSdExtraNetworksGetSingleCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['tabname'] != null) {
            queryParameters['tabname'] = requestParameters['tabname'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sd_extra_networks/get-single-card`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Single Card
     */
    async getSingleCardSdExtraNetworksGetSingleCardGet(requestParameters: GetSingleCardSdExtraNetworksGetSingleCardGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSingleCardSdExtraNetworksGetSingleCardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Token
     */
    async getTokenTokenGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Token
     */
    async getTokenTokenGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getTokenTokenGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Token
     */
    async getTokenTokenGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Token
     */
    async getTokenTokenGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getTokenTokenGet_5Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UpscalerItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/upscalers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpscalerItemFromJSON));
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UpscalerItem>> {
        const response = await this.getUpscalersSdapiV1UpscalersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPostRaw(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageToImageResponse>> {
        if (requestParameters['stableDiffusionProcessingImg2Img'] == null) {
            throw new runtime.RequiredError(
                'stableDiffusionProcessingImg2Img',
                'Required parameter "stableDiffusionProcessingImg2Img" was null or undefined when calling img2imgapiSdapiV1Img2imgPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/img2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingImg2ImgToJSON(requestParameters['stableDiffusionProcessingImg2Img']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageToImageResponseFromJSON(jsonValue));
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPost(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageToImageResponse> {
        const response = await this.img2imgapiSdapiV1Img2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePostRaw(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['interrogateRequest'] == null) {
            throw new runtime.RequiredError(
                'interrogateRequest',
                'Required parameter "interrogateRequest" was null or undefined when calling interrogateapiSdapiV1InterrogatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/interrogate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterrogateRequestToJSON(requestParameters['interrogateRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePost(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.interrogateapiSdapiV1InterrogatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/interrupt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.interruptapiSdapiV1InterruptPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * <Lambda>
     */
    async lambdaInternalPingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * <Lambda>
     */
    async lambdaInternalPingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.lambdaInternalPingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * <Lambda>
     */
    async lambdaInternalProfileStartupGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal/profile-startup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * <Lambda>
     */
    async lambdaInternalProfileStartupGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.lambdaInternalProfileStartupGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * <Lambda>
     */
    async lambdaInternalSysinfoDownloadGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal/sysinfo-download`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * <Lambda>
     */
    async lambdaInternalSysinfoDownloadGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.lambdaInternalSysinfoDownloadGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Link Status
     */
    async linkStatusCivitaiV1LinkStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/civitai/v1/link-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Link Status
     */
    async linkStatusCivitaiV1LinkStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.linkStatusCivitaiV1LinkStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login_check/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginCheckLoginCheckGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet_6Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login_check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login Check
     */
    async loginCheckLoginCheckGet_6(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginCheckLoginCheckGet_6Raw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPostRaw(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling loginLoginPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling loginLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        const response = await this.request({
            path: `/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async loginLoginPost(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPost_7Raw(requestParameters: LoginLoginPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling loginLoginPost_7().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling loginLoginPost_7().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async loginLoginPost_7(requestParameters: LoginLoginPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginLoginPost_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Main
     */
    async mainGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Main
     */
    async mainGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mainGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Main
     */
    async mainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Main
     */
    async mainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mainHeadRaw(initOverrides);
        return await response.value();
    }

    /**
     * Model List
     */
    async modelListControlnetModelListGetRaw(requestParameters: ModelListControlnetModelListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['update'] != null) {
            queryParameters['update'] = requestParameters['update'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/model_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Model List
     */
    async modelListControlnetModelListGet(requestParameters: ModelListControlnetModelListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.modelListControlnetModelListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Module List
     */
    async moduleListControlnetModuleListGetRaw(requestParameters: ModuleListControlnetModuleListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['aliasNames'] != null) {
            queryParameters['alias_names'] = requestParameters['aliasNames'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/module_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Module List
     */
    async moduleListControlnetModuleListGet(requestParameters: ModuleListControlnetModuleListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.moduleListControlnetModuleListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPostRaw(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PNGInfoResponse>> {
        if (requestParameters['pNGInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'pNGInfoRequest',
                'Required parameter "pNGInfoRequest" was null or undefined when calling pnginfoapiSdapiV1PngInfoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/png-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PNGInfoRequestToJSON(requestParameters['pNGInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PNGInfoResponseFromJSON(jsonValue));
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPost(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PNGInfoResponse> {
        const response = await this.pnginfoapiSdapiV1PngInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictApiApiNamePostRaw(requestParameters: PredictApiApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling predictApiApiNamePost().'
            );
        }

        if (requestParameters['predictBody'] == null) {
            throw new runtime.RequiredError(
                'predictBody',
                'Required parameter "predictBody" was null or undefined when calling predictApiApiNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/{api_name}/`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters['predictBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictApiApiNamePost(requestParameters: PredictApiApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictApiApiNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictApiApiNamePost_8Raw(requestParameters: PredictApiApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling predictApiApiNamePost_8().'
            );
        }

        if (requestParameters['predictBody'] == null) {
            throw new runtime.RequiredError(
                'predictBody',
                'Required parameter "predictBody" was null or undefined when calling predictApiApiNamePost_8().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/{api_name}`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters['predictBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictApiApiNamePost_8(requestParameters: PredictApiApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictApiApiNamePost_8Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictRunApiNamePostRaw(requestParameters: PredictRunApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling predictRunApiNamePost().'
            );
        }

        if (requestParameters['predictBody'] == null) {
            throw new runtime.RequiredError(
                'predictBody',
                'Required parameter "predictBody" was null or undefined when calling predictRunApiNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run/{api_name}/`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters['predictBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictRunApiNamePost(requestParameters: PredictRunApiNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictRunApiNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictRunApiNamePost_9Raw(requestParameters: PredictRunApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling predictRunApiNamePost_9().'
            );
        }

        if (requestParameters['predictBody'] == null) {
            throw new runtime.RequiredError(
                'predictBody',
                'Required parameter "predictBody" was null or undefined when calling predictRunApiNamePost_9().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run/{api_name}`.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictBodyToJSON(requestParameters['predictBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Predict
     */
    async predictRunApiNamePost_9(requestParameters: PredictRunApiNamePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.predictRunApiNamePost_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPostRaw(requestParameters: PreprocessSdapiV1PreprocessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreprocessResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling preprocessSdapiV1PreprocessPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/preprocess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreprocessResponseFromJSON(jsonValue));
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPost(requestParameters: PreprocessSdapiV1PreprocessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreprocessResponse> {
        const response = await this.preprocessSdapiV1PreprocessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Progressapi
     */
    async progressapiInternalProgressPostRaw(requestParameters: ProgressapiInternalProgressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModulesProgressProgressResponse>> {
        if (requestParameters['progressRequest'] == null) {
            throw new runtime.RequiredError(
                'progressRequest',
                'Required parameter "progressRequest" was null or undefined when calling progressapiInternalProgressPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/internal/progress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProgressRequestToJSON(requestParameters['progressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModulesProgressProgressResponseFromJSON(jsonValue));
    }

    /**
     * Progressapi
     */
    async progressapiInternalProgressPost(requestParameters: ProgressapiInternalProgressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModulesProgressProgressResponse> {
        const response = await this.progressapiInternalProgressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGetRaw(requestParameters: ProgressapiSdapiV1ProgressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModulesApiModelsProgressResponse>> {
        const queryParameters: any = {};

        if (requestParameters['skipCurrentImage'] != null) {
            queryParameters['skip_current_image'] = requestParameters['skipCurrentImage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/progress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModulesApiModelsProgressResponseFromJSON(jsonValue));
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGet(requestParameters: ProgressapiSdapiV1ProgressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModulesApiModelsProgressResponse> {
        const response = await this.progressapiSdapiV1ProgressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Quicksettings Hint
     */
    async quicksettingsHintInternalQuicksettingsHintGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuicksettingsHint>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal/quicksettings-hint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuicksettingsHintFromJSON));
    }

    /**
     * Quicksettings Hint
     */
    async quicksettingsHintInternalQuicksettingsHintGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuicksettingsHint>> {
        const response = await this.quicksettingsHintInternalQuicksettingsHintGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-checkpoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh Loras
     */
    async refreshLorasSdapiV1RefreshLorasPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-loras`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Refresh Loras
     */
    async refreshLorasSdapiV1RefreshLorasPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.refreshLorasSdapiV1RefreshLorasPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh Vae
     */
    async refreshVaeSdapiV1RefreshVaePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-vae`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Refresh Vae
     */
    async refreshVaeSdapiV1RefreshVaePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.refreshVaeSdapiV1RefreshVaePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reloadapi
     */
    async reloadapiSdapiV1ReloadCheckpointPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/reload-checkpoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reloadapi
     */
    async reloadapiSdapiV1ReloadCheckpointPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reloadapiSdapiV1ReloadCheckpointPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPostRaw(requestParameters: ResetIteratorResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['resetBody'] == null) {
            throw new runtime.RequiredError(
                'resetBody',
                'Required parameter "resetBody" was null or undefined when calling resetIteratorResetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetBodyToJSON(requestParameters['resetBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost(requestParameters: ResetIteratorResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetIteratorResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost_10Raw(requestParameters: ResetIteratorResetPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['resetBody'] == null) {
            throw new runtime.RequiredError(
                'resetBody',
                'Required parameter "resetBody" was null or undefined when calling resetIteratorResetPost_10().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetBodyToJSON(requestParameters['resetBody']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset Iterator
     */
    async resetIteratorResetPost_10(requestParameters: ResetIteratorResetPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetIteratorResetPost_10Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse Proxy
     */
    async reverseProxyProxyUrlPathGetRaw(requestParameters: ReverseProxyProxyUrlPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['urlPath'] == null) {
            throw new runtime.RequiredError(
                'urlPath',
                'Required parameter "urlPath" was null or undefined when calling reverseProxyProxyUrlPathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proxy={url_path}`.replace(`{${"url_path"}}`, encodeURIComponent(String(requestParameters['urlPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reverse Proxy
     */
    async reverseProxyProxyUrlPathGet(requestParameters: ReverseProxyProxyUrlPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reverseProxyProxyUrlPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse Proxy
     */
    async reverseProxyProxyUrlPathHeadRaw(requestParameters: ReverseProxyProxyUrlPathHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['urlPath'] == null) {
            throw new runtime.RequiredError(
                'urlPath',
                'Required parameter "urlPath" was null or undefined when calling reverseProxyProxyUrlPathHead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proxy={url_path}`.replace(`{${"url_path"}}`, encodeURIComponent(String(requestParameters['urlPath']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reverse Proxy
     */
    async reverseProxyProxyUrlPathHead(requestParameters: ReverseProxyProxyUrlPathHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reverseProxyProxyUrlPathHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Robots Txt
     */
    async robotsTxtRobotsTxtGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/robots.txt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Robots Txt
     */
    async robotsTxtRobotsTxtGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.robotsTxtRobotsTxtGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Roop Image
     */
    async roopImageRoopImagePostRaw(requestParameters: RoopImageRoopImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roop/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyRoopImageRoopImagePostToJSON(requestParameters['bodyRoopImageRoopImagePost']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Roop Image
     */
    async roopImageRoopImagePost(requestParameters: RoopImageRoopImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.roopImageRoopImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Roop Models
     */
    async roopModelsRoopModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roop/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Roop Models
     */
    async roopModelsRoopModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.roopModelsRoopModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPostRaw(requestParameters: SetConfigSdapiV1OptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setConfigSdapiV1OptionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPost(requestParameters: SetConfigSdapiV1OptionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setConfigSdapiV1OptionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Settings
     */
    async settingsControlnetSettingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Settings
     */
    async settingsControlnetSettingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.settingsControlnetSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/skip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.skipSdapiV1SkipPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Startup Events
     */
    async startupEventsStartupEventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/startup-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Startup Events
     */
    async startupEventsStartupEventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.startupEventsStartupEventsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Static Resource
     */
    async staticResourceStaticPathGetRaw(requestParameters: StaticResourceStaticPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling staticResourceStaticPathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/static/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters['path']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Static Resource
     */
    async staticResourceStaticPathGet(requestParameters: StaticResourceStaticPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.staticResourceStaticPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stream
     */
    async streamStreamSessionHashRunComponentIdGetRaw(requestParameters: StreamStreamSessionHashRunComponentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionHash'] == null) {
            throw new runtime.RequiredError(
                'sessionHash',
                'Required parameter "sessionHash" was null or undefined when calling streamStreamSessionHashRunComponentIdGet().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling streamStreamSessionHashRunComponentIdGet().'
            );
        }

        if (requestParameters['componentId'] == null) {
            throw new runtime.RequiredError(
                'componentId',
                'Required parameter "componentId" was null or undefined when calling streamStreamSessionHashRunComponentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stream/{session_hash}/{run}/{component_id}`.replace(`{${"session_hash"}}`, encodeURIComponent(String(requestParameters['sessionHash']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))).replace(`{${"component_id"}}`, encodeURIComponent(String(requestParameters['componentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream
     */
    async streamStreamSessionHashRunComponentIdGet(requestParameters: StreamStreamSessionHashRunComponentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.streamStreamSessionHashRunComponentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPostRaw(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextToImageResponse>> {
        if (requestParameters['stableDiffusionProcessingTxt2Img'] == null) {
            throw new runtime.RequiredError(
                'stableDiffusionProcessingTxt2Img',
                'Required parameter "stableDiffusionProcessingTxt2Img" was null or undefined when calling text2imgapiSdapiV1Txt2imgPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/txt2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingTxt2ImgToJSON(requestParameters['stableDiffusionProcessingTxt2Img']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextToImageResponseFromJSON(jsonValue));
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPost(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextToImageResponse> {
        const response = await this.text2imgapiSdapiV1Txt2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Theme Css
     */
    async themeCssThemeCssGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/theme.css`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Theme Css
     */
    async themeCssThemeCssGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.themeCssThemeCssGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrainResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling trainEmbeddingSdapiV1TrainEmbeddingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPost(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrainResponse> {
        const response = await this.trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrainResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling trainHypernetworkSdapiV1TrainHypernetworkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPost(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrainResponse> {
        const response = await this.trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unloadapi
     */
    async unloadapiSdapiV1UnloadCheckpointPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/unload-checkpoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unloadapi
     */
    async unloadapiSdapiV1UnloadCheckpointPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.unloadapiSdapiV1UnloadCheckpointPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload File
     */
    async uploadFileUploadPostRaw(requestParameters: UploadFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling uploadFileUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload File
     */
    async uploadFileUploadPost(requestParameters: UploadFileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.uploadFileUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Version
     */
    async versionControlnetFastloadVersionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnetFastload/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Version
     */
    async versionControlnetFastloadVersionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.versionControlnetFastloadVersionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Version
     */
    async versionControlnetVersionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/controlnet/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Version
     */
    async versionControlnetVersionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.versionControlnetVersionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * View
     */
    async viewControlnetFastloadViewPostRaw(requestParameters: ViewControlnetFastloadViewPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/controlnetFastload/view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyViewControlnetFastloadViewPostToJSON(requestParameters['bodyViewControlnetFastloadViewPost']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * View
     */
    async viewControlnetFastloadViewPost(requestParameters: ViewControlnetFastloadViewPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.viewControlnetFastloadViewPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
